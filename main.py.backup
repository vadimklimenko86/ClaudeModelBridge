#!/usr/bin/env python3
"""
Main entry point for Remote MCP Server
Official Python SDK v1.9.2 implementation
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Import Flask for WSGI compatibility with gunicorn
from flask import Flask, jsonify, render_template_string, request, redirect, url_for, session
from flask_cors import CORS
import json
import time
import platform
import psutil
import base64
import urllib.parse
from oauth_handler import OAuth2Client, OAuth2Handler

# Create Flask app for gunicorn
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET",
                                "B7A2F038-5990-4DB5-B7BD-873E122A9BA1")

app.config['SESSION_COOKIE_SECURE'] = False  # Allow HTTP for development
app.config['SESSION_COOKIE_HTTPONLY'] = False
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
CORS(app, supports_credentials=True)

# Инициализация OAuth сервера
oauth2_handler = OAuth2Handler(app)

# Регистрация клиента
oauth2_handler.register_client(
    client_id='my_app',
    client_secret='secret123',
    redirect_uris=['https://claude.ai/oauth/callback'],
    name='My Application')

# HTML template for dashboard
DASHBOARD_HTML = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Remote MCP Server Dashboard</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 40px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }
        .container { 
            max-width: 1000px; 
            margin: 0 auto; 
            background: white; 
            padding: 30px; 
            border-radius: 15px; 
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        h1 { color: #4a5568; text-align: center; margin-bottom: 30px; }
        .status { 
            display: flex; 
            align-items: center; 
            gap: 10px; 
            margin: 20px 0;
            padding: 15px;
            background: #e6fffa;
            border-radius: 8px;
        }
        .status-dot { 
            width: 12px; 
            height: 12px; 
            border-radius: 50%; 
            background: #48bb78; 
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.1); opacity: 0.7; }
            100% { transform: scale(1); opacity: 1; }
        }
        .grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
            gap: 20px; 
            margin: 30px 0;
        }
        .card { 
            background: #f7fafc; 
            padding: 20px; 
            border-radius: 10px; 
            border: 1px solid #e2e8f0;
        }
        .card h3 { color: #4a5568; margin-bottom: 15px; }
        .metric { 
            display: flex; 
            justify-content: space-between; 
            margin: 10px 0; 
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
        }
        .metric:last-child { border-bottom: none; }
        .buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin: 30px 0;
            flex-wrap: wrap;
        }
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            background: #4299e1;
            color: white;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn:hover {
            background: #3182ce;
            transform: translateY(-2px);
        }
        .btn-secondary {
            background: #48bb78;
        }
        .btn-secondary:hover {
            background: #38a169;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Remote MCP Server</h1>
        <p style="text-align: center; color: #718096; margin-bottom: 30px;">
            Model Context Protocol Server using Official Python SDK v1.9.2
        </p>
        
        <div class="status">
            <div class="status-dot"></div>
            <span><strong>Server Online</strong> - Ready for Claude.ai integration</span>
        </div>

        <div class="grid">
            <div class="card">
                <h3>Server Information</h3>
                <div class="metric">
                    <span>Protocol Version</span>
                    <span>2024-11-05</span>
                </div>
                <div class="metric">
                    <span>SDK Version</span>
                    <span>1.9.2</span>
                </div>
                <div class="metric">
                    <span>Transport</span>
                    <span>HTTP + stdio</span>
                </div>
                <div class="metric">
                    <span>Claude.ai Compatible</span>
                    <span>✓ Yes</span>
                </div>
            </div>

            <div class="card">
                <h3>System Status</h3>
                <div id="metrics">
                    <div class="metric">
                        <span>Loading...</span>
                        <span>...</span>
                    </div>
                </div>
            </div>

            <div class="card">
                <h3>Available Features</h3>
                <div class="metric">
                    <span>Echo Tool</span>
                    <span>✓ Active</span>
                </div>
                <div class="metric">
                    <span>System Monitor</span>
                    <span>✓ Active</span>
                </div>
                <div class="metric">
                    <span>Calculator</span>
                    <span>✓ Active</span>
                </div>
                <div class="metric">
                    <span>File Operations</span>
                    <span>✓ Active</span>
                </div>
                <div class="metric">
                    <span>Network Info</span>
                    <span>✓ Active</span>
                </div>
            </div>
        </div>

        <div class="buttons">
            <a href="/mcp/info" class="btn">MCP Info</a>
            <a href="/mcp/tools" class="btn btn-secondary">Tools List</a>
            <a href="/mcp/resources" class="btn btn-secondary">Resources</a>
            <a href="/health" class="btn">Health Check</a>
        </div>
    </div>

    <script>
        async function loadMetrics() {
            try {
                const response = await fetch('/api/metrics');
                const data = await response.json();
                
                document.getElementById('metrics').innerHTML = `
                    <div class="metric">
                        <span>CPU Usage</span>
                        <span>${data.cpu_percent.toFixed(1)}%</span>
                    </div>
                    <div class="metric">
                        <span>Memory Usage</span>
                        <span>${data.memory_percent.toFixed(1)}%</span>
                    </div>
                    <div class="metric">
                        <span>Disk Usage</span>
                        <span>${data.disk_percent.toFixed(1)}%</span>
                    </div>
                `;
            } catch (error) {
                console.error('Error loading metrics:', error);
            }
        }

        // Load metrics on page load and refresh every 5 seconds
        document.addEventListener('DOMContentLoaded', loadMetrics);
        setInterval(loadMetrics, 5000);
    </script>
</body>
</html>
"""


@app.route('/')
def dashboard():
    """Main dashboard"""
    return render_template_string(DASHBOARD_HTML)


@app.route('/health')
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status":
        "healthy",
        "server":
        "Remote MCP Server",
        "version":
        "1.0.0",
        "sdk_version":
        "1.9.2",
        "protocol_version":
        "2024-11-05",
        "timestamp":
        time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime())
    })


@app.route('/api/metrics')
def get_metrics():
    """Get system metrics"""
    try:
        cpu_percent = psutil.cpu_percent(interval=0.1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')

        return jsonify({
            "cpu_percent":
            cpu_percent,
            "memory_percent":
            memory.percent,
            "disk_percent": (disk.used / disk.total) * 100,
            "timestamp":
            time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime())
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500


#@app.route('/mcp', methods=['GET', 'POST'])
def get_server_info():
    """Возвращает информацию о MCP сервере согласно спецификации"""
    server_info = {
        "protocolVersion": "2025-03-26",
        "serverInfo": {
            "name": "Remote MCP Server",
            "version": "1.0.0"
        },
        "capabilities": {
            #"tools": {
            #    "listChanged": True
            #},
            "tools": True
            #"resources": {
            #    "subscribe": False,
            #    "listChanged": True
            #},
            #"prompts": {
            #    "listChanged": True
            #},
            #"logging": {}
        }
    }

    # Дополнительная информация (не стандарт MCP, но полезно)
    extended_info = {
        "sdk_version": "1.9.2",
        "transport": ["http"],
        "endpoints": {
            "initialize": "/mcp/initialize",
            "tools": "/mcp/tools",
            "resources": "/mcp/resources",
            #"call_tool": "/mcp/call",
            #"read_resource": "/mcp/read",
            "prompts": "/mcp/prompts"
        },
        "claude_ai_compatible": True,
        "official_sdk": True
    }

    # Объединяем стандартную и расширенную информацию
    result = {**server_info, **extended_info}

    #logger.info(f"MCP Server Info requested: {result}")
    return jsonify(result)


@app.route('/mcp', methods=['GET', 'POST'])
@app.route('/mcp/info')
#@app.route('/mcp')
def mcp_info():
    """MCP server information"""
    ret = {
        "name": "Remote MCP Server",
        "version": "1.0.0",
        "protocol_version": "2025-03-26",
        "sdk_version": "1.9.2",
        "transport": ["http"],
        "capabilities": {
            "tools": {
                "listChanged": True
            },
            #       "resources": {
            #           "subscribe": True,
            #           "listChanged": True
            #       },
            "prompts": {
                "listChanged": True
            }
        },
        "endpoints": {
            "tools": "/mcp/tools",
            "resources": "/mcp/resources",
            "call_tool": "/mcp/call",
            "read_resource": "/mcp/read"
        },
        "claude_ai_compatible": True,
        "official_sdk": True
    }
    #ret = {
    #    "protocolVersion": "2025-03-26",
    #    "serverInfo": {"my-server", "1.0.0"},
    #    "capabilities": {
    #        "tools": True,
    #        "resources": False  # Можно добавить поддержку ресурсов
    #    }
    #}
    return jsonify(ret)


@app.route('/mcp/tools')
def list_tools():
    """List available MCP tools"""
    return jsonify([{
        "name": "echo",
        "description": "Echo back any message with timestamp and metadata",
        "inputSchema": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Message to echo back"
                },
                "metadata": {
                    "type": "object",
                    "description": "Optional metadata to include"
                }
            },
            "required": ["message"]
        }
    }, {
        "name": "system_monitor",
        "description": "Get comprehensive real-time system monitoring data",
        "inputSchema": {
            "type": "object",
            "properties": {
                "detail_level": {
                    "type": "string",
                    "enum": ["basic", "detailed", "full"],
                    "description": "Level of detail for system information"
                },
                "include_processes": {
                    "type": "boolean",
                    "description": "Include running processes"
                }
            }
        }
    }, {
        "name": "calculator",
        "description":
        "Advanced mathematical calculator with functions and constants",
        "inputSchema": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Mathematical expression to evaluate"
                },
                "precision": {
                    "type": "integer",
                    "description": "Number of decimal places",
                    "default": 10
                }
            },
            "required": ["expression"]
        }
    }, {
        "name": "file_operations",
        "description": "Safe file system operations (read, list, info)",
        "inputSchema": {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": ["read", "list", "info", "exists"]
                },
                "path": {
                    "type": "string",
                    "description": "File or directory path"
                },
                "encoding": {
                    "type": "string",
                    "default": "utf-8"
                }
            },
            "required": ["operation", "path"]
        }
    }, {
        "name": "network_info",
        "description": "Get network interface and connectivity information",
        "inputSchema": {
            "type": "object",
            "properties": {
                "include_stats": {
                    "type": "boolean",
                    "description": "Include network I/O statistics",
                    "default": True
                }
            }
        }
    }])


@app.route('/mcp/resources')
def list_resources():
    """List available MCP resources"""
    return jsonify([{
        "uri": "system://monitor/realtime",
        "name": "Real-time System Monitor",
        "description": "Live system metrics and performance data",
        "mimeType": "application/json"
    }, {
        "uri": "system://processes/active",
        "name": "Active Processes",
        "description": "Currently running system processes",
        "mimeType": "application/json"
    }, {
        "uri": "system://network/interfaces",
        "name": "Network Interfaces",
        "description": "Network interface configuration and statistics",
        "mimeType": "application/json"
    }, {
        "uri": "system://logs/recent",
        "name": "Recent System Logs",
        "description": "Recent system and application logs",
        "mimeType": "text/plain"
    }])


@app.route('/mcp/call/<tool_name>', methods=['POST'])
def call_tool(tool_name):
    """Call a specific MCP tool"""
    try:
        from flask import request
        arguments = request.get_json() or {}

        if tool_name == "echo":
            message = arguments.get("message", "")
            metadata = arguments.get("metadata", {})
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime())

            response = {
                "original_message": message,
                "timestamp": timestamp,
                "metadata": metadata,
                "server_info": {
                    "name": "Remote MCP Server",
                    "protocol_version": "2024-11-05",
                    "sdk_version": "1.9.2"
                }
            }

            return jsonify({
                "tool":
                tool_name,
                "result": [{
                    "type": "text",
                    "text": json.dumps(response, indent=2)
                }]
            })

        elif tool_name == "system_monitor":
            detail_level = arguments.get("detail_level", "detailed")
            include_processes = arguments.get("include_processes", False)

            # Get system information
            info = {
                "timestamp": time.strftime('%Y-%m-%d %H:%M:%S UTC',
                                           time.gmtime()),
                "detail_level": detail_level,
                "system": {
                    "platform": platform.system(),
                    "release": platform.release(),
                    "machine": platform.machine(),
                    "python_version": platform.python_version()
                },
                "cpu": {
                    "physical_cores": psutil.cpu_count(logical=False),
                    "logical_cores": psutil.cpu_count(logical=True),
                    "current_usage": psutil.cpu_percent(interval=1)
                },
                "memory": {
                    "total": psutil.virtual_memory().total,
                    "available": psutil.virtual_memory().available,
                    "used": psutil.virtual_memory().used,
                    "percentage": psutil.virtual_memory().percent
                },
                "disk": {
                    "total":
                    psutil.disk_usage('/').total,
                    "used":
                    psutil.disk_usage('/').used,
                    "free":
                    psutil.disk_usage('/').free,
                    "percentage": (psutil.disk_usage('/').used /
                                   psutil.disk_usage('/').total) * 100
                }
            }

            if include_processes:
                processes = []
                for proc in psutil.process_iter(
                    ['pid', 'name', 'cpu_percent', 'memory_percent',
                     'status']):
                    try:
                        proc_info = proc.info
                        if proc_info['cpu_percent'] is not None:
                            processes.append(proc_info)
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        pass

                processes.sort(key=lambda x: x['cpu_percent'] or 0,
                               reverse=True)
                info["top_processes"] = processes[:20]

            return jsonify({
                "tool":
                tool_name,
                "result": [{
                    "type": "text",
                    "text": json.dumps(info, indent=2)
                }]
            })

        elif tool_name == "calculator":
            expression = arguments.get("expression", "")
            precision = arguments.get("precision", 10)

            try:
                # Simple safe evaluation for basic math
                import ast
                import operator
                import math

                # Supported operations
                ops = {
                    ast.Add: operator.add,
                    ast.Sub: operator.sub,
                    ast.Mult: operator.mul,
                    ast.Div: operator.truediv,
                    ast.Pow: operator.pow,
                    ast.USub: operator.neg,
                }

                def safe_eval(node):
                    if isinstance(node, ast.Constant):
                        return node.value
                    elif isinstance(node, ast.BinOp):
                        return ops[type(node.op)](safe_eval(node.left),
                                                  safe_eval(node.right))
                    elif isinstance(node, ast.UnaryOp):
                        return ops[type(node.op)](safe_eval(node.operand))
                    elif isinstance(node, ast.Name):
                        if node.id == 'pi':
                            return math.pi
                        elif node.id == 'e':
                            return math.e
                        else:
                            raise ValueError(f"Undefined variable: {node.id}")
                    else:
                        raise TypeError(
                            f"Unsupported operation: {type(node).__name__}")

                tree = ast.parse(expression, mode='eval')
                result = safe_eval(tree.body)

                if isinstance(result, float):
                    if result.is_integer():
                        formatted_result = str(int(result))
                    else:
                        formatted_result = f"{result:.{precision}f}".rstrip(
                            '0').rstrip('.')
                else:
                    formatted_result = str(result)

                response = {
                    "expression": expression,
                    "result": formatted_result,
                    "raw_result": result,
                    "type": type(result).__name__,
                    "precision": precision
                }

                return jsonify({
                    "tool":
                    tool_name,
                    "result": [{
                        "type": "text",
                        "text": json.dumps(response, indent=2)
                    }]
                })

            except Exception as e:
                error_response = {
                    "expression": expression,
                    "error": str(e),
                    "error_type": type(e).__name__,
                    "supported_operations": ["+", "-", "*", "/", "**", "()"],
                    "supported_constants": ["pi", "e"]
                }
                return jsonify({
                    "tool":
                    tool_name,
                    "result": [{
                        "type": "text",
                        "text": json.dumps(error_response, indent=2)
                    }]
                })

        else:
            return jsonify({"error": f"Unknown tool: {tool_name}"}), 400

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# Protected MCP endpoints with OAuth 2.0
def require_oauth(scopes=None):
    """Decorator to require OAuth 2.0 authorization"""

    def decorator(f):

        def decorated_function(*args, **kwargs):
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return jsonify({
                    "error":
                    "unauthorized",
                    "error_description":
                    "Missing or invalid access token"
                }), 401

            access_token = auth_header[7:]  # Remove 'Bearer ' prefix
            token_obj = oauth_handler.validate_access_token(access_token)

            if not token_obj:
                return jsonify({
                    "error":
                    "invalid_token",
                    "error_description":
                    "Access token is invalid or expired"
                }), 401

            # Check scope if required
            if scopes:
                token_scopes = set(token_obj.scope.split())
                required_scopes = set(scopes)

                # Allow "claudeai" scope to access all MCP functions
                if "claudeai" in token_scopes:
                    pass  # claudeai scope grants full access
                elif not required_scopes.issubset(token_scopes):
                    return jsonify({
                        "error": "insufficient_scope",
                        "error_description": "Insufficient scope"
                    }), 403

            # Store token info in request context
            request.oauth_token = token_obj
            return f(*args, **kwargs)

        decorated_function.__name__ = f.__name__
        return decorated_function

    return decorator


# Protected MCP endpoints
@app.route('/mcp/protected/tools')
@require_oauth(['mcp:tools'])
def protected_list_tools():
    """List MCP tools (OAuth protected)"""
    return list_tools()


@app.route('/mcp/protected/call/<tool_name>', methods=['POST'])
@require_oauth(['mcp:tools'])
def protected_call_tool(tool_name):
    """Call MCP tool (OAuth protected)"""
    arguments = request.get_json() or {}
    return call_tool(tool_name)


@app.route('/mcp/protected/resources')
@require_oauth(['mcp:resources'])
def protected_list_resources():
    """List MCP resources (OAuth protected)"""
    return list_resources()


if __name__ == "__main__":
    # Create necessary directories
    Path("templates").mkdir(exist_ok=True)
    Path("static").mkdir(exist_ok=True)

    logger.info("Starting Remote MCP Server with OAuth 2.0")
    logger.info("Official Python SDK v1.9.2")
    logger.info("Protocol Version: 2024-11-05")
    logger.info("OAuth 2.0 Authorization Server ready")

    app.run(host="0.0.0.0", port=5000, debug=True)
