"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Event Store —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
"""

import asyncio
import json
import logging
from datetime import datetime

from event_store import create_event_store, PersistentEventStore
from event_store_config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Event Store."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    config = get_config("development")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: persistent={config.persistent}")
    
    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π
    store = create_event_store(
        persistent=config.persistent,
        db_path=config.db_path,
        max_events_per_stream=config.max_events_per_stream,
        retention_days=config.retention_days,
        memory_cache_size=config.memory_cache_size
    )
    
    print(f"–°–æ–∑–¥–∞–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {type(store).__name__}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    test_messages = [
        {"method": "initialize", "params": {"client": "test_client_1"}},
        {"method": "tools/list", "params": {}},
        {"method": "tools/call", "params": {"name": "calculator", "arguments": {"a": 5, "b": 3}}},
        {"method": "resources/list", "params": {}},
        {"method": "complete", "params": {"session_id": "12345"}}
    ]
    
    stream_id = "demo_stream_001"
    event_ids = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
    print(f"\n–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(test_messages)} —Å–æ–±—ã—Ç–∏–π –≤ –ø–æ—Ç–æ–∫ {stream_id}:")
    for i, message in enumerate(test_messages):
        event_id = await store.store_event(stream_id, message)
        event_ids.append(event_id)
        print(f"  {i+1}. –°–æ–±—ã—Ç–∏–µ {event_id[:8]}... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.sleep(0.1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = store.get_stream_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤: {stats}")
    
    return store, stream_id, event_ids


async def demo_replay_functionality(store, stream_id, event_ids):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π ===")
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –ø–µ—Ä–µ–∏–≥—Ä–∞–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    replayed_events = []
    
    async def collect_event(event_message):
        """Callback –¥–ª—è —Å–±–æ—Ä–∞ –ø–µ—Ä–µ–∏–≥—Ä–∞–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        replayed_events.append({
            "event_id": event_message.event_id,
            "message": event_message.message
        })
        print(f"  –ü–µ—Ä–µ–∏–≥—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_message.event_id[:8]}...")
    
    # –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    last_event_id = event_ids[1]  # –ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    print(f"–ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ {last_event_id[:8]}...")
    
    result_stream_id = await store.replay_events_after(last_event_id, collect_event)
    
    if result_stream_id:
        print(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–≥—Ä–∞–Ω–æ {len(replayed_events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–∞ {result_stream_id}")
        for i, event in enumerate(replayed_events):
            print(f"  {i+1}. {event['message'].get('method', 'unknown')}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–≥—Ä–∞—Ç—å —Å–æ–±—ã—Ç–∏—è")


async def demo_persistent_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    config = get_config("production")
    config.db_path = "InternalStorage/demo_events.db"  # –û—Ç–¥–µ–ª—å–Ω–∞—è –ë–î –¥–ª—è –¥–µ–º–æ
    
    store = PersistentEventStore(
        db_path=config.db_path,
        max_events_per_stream=config.max_events_per_stream,
        retention_days=config.retention_days
    )
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {config.db_path}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
    streams = ["user_session_1", "user_session_2", "admin_session_1"]
    
    for stream_id in streams:
        print(f"\n–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –ø–æ—Ç–æ–∫ {stream_id}:")
        for i in range(5):
            message = {
                "method": f"action_{i}",
                "params": {"stream": stream_id, "timestamp": datetime.now().isoformat()},
                "user": stream_id.split('_')[0]
            }
            event_id = await store.store_event(stream_id, message)
            print(f"  –°–æ–±—ã—Ç–∏–µ {i+1}: {event_id[:8]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
    if hasattr(store, 'get_database_info'):
        db_info = store.get_database_info()
        print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  –†–∞–∑–º–µ—Ä: {db_info['database_size_mb']} MB")
        print(f"  –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {db_info['total_events']}")
        print(f"  –ü–æ—Ç–æ–∫–æ–≤: {db_info['total_streams']}")
        print(f"  –ö—ç—à –≤ –ø–∞–º—è—Ç–∏: {db_info['cache_size']} —Å–æ–±—ã—Ç–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Ç–æ–∫–∞
    print(f"\n–û—á–∏—â–∞–µ–º –ø–æ—Ç–æ–∫ user_session_1...")
    deleted_count = store.clear_stream("user_session_1")
    print(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π")
    
    final_stats = store.get_stream_stats()
    print(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {final_stats}")


async def demo_backup_and_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –±—ç–∫–∞–ø–æ–≤ ===")
    
    from event_store_migrations import EventStoreManager
    
    db_path = "InternalStorage/demo_events.db"
    manager = EventStoreManager(db_path)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        print("–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        backup_path = manager.create_backup("demo_backup")
        print(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        stats = manager.get_database_stats()
        
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:")
        print(f"  –†–∞–∑–º–µ—Ä: {stats.get('db_size_mb', 0)} MB")
        print(f"  –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats.get('total_events', 0)}")
        print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {stats.get('total_streams', 0)}")
        
        if stats.get('top_streams'):
            print(f"  –¢–æ–ø –ø–æ—Ç–æ–∫–æ–≤:")
            for stream in stats['top_streams'][:3]:
                print(f"    {stream['stream_id']}: {stream['event_count']} —Å–æ–±—ã—Ç–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        validation = manager.validate_database()
        
        if validation['valid']:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω–∞")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for error in validation['errors']:
                print(f"    - {error}")
        
        if validation.get('warnings'):
            print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in validation['warnings']:
                print(f"    - {warning}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        print("\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è...")
        export_path = "InternalStorage/exported_events.json"
        exported_count = manager.export_events(export_path)
        print(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} —Å–æ–±—ã—Ç–∏–π –≤ {export_path}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {e}")


async def demo_configuration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ===")
    
    configs = ["development", "testing", "production"]
    
    for config_name in configs:
        config = get_config(config_name)
        print(f"\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}':")
        print(f"  –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ: {config.persistent}")
        print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.db_path}")
        print(f"  –ú–∞–∫—Å. —Å–æ–±—ã—Ç–∏–π –Ω–∞ –ø–æ—Ç–æ–∫: {config.max_events_per_stream}")
        print(f"  –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {config.retention_days} –¥–Ω–µ–π")
        print(f"  –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {config.memory_cache_size}")
        print(f"  –ë—ç–∫–∞–ø—ã: {'–≤–∫–ª—é—á–µ–Ω—ã' if config.backup_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Event Store —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")
    print("=" * 60)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        await demo_configuration()
        
        # –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        store, stream_id, event_ids = await demo_basic_usage()
        
        # –ü–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        await demo_replay_functionality(store, stream_id, event_ids)
        
        # –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await demo_persistent_features()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –±—ç–∫–∞–ø—ã
        await demo_backup_and_management()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")


if __name__ == "__main__":
    asyncio.run(main())