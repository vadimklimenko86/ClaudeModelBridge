from MCP_Tools import MCP_Tools
import mcp.types as types
import datetime
import os
import logging
import json
import subprocess
import re
from typing import Dict, Callable, Annotated, List, Optional
from pathlib import Path


class GitTools:

    def __init__(self, mcp: MCP_Tools) -> None:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.tz_plus3 = datetime.timezone(datetime.timedelta(hours=3))
        self.working_dir = "Data"  # "."
        self.log_file = os.path.join("Tools", "git.log")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not self.working_dir == None:
            os.makedirs(self.working_dir, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._register_tools(mcp)

        self.logger.info("GitTools initialized")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger('GitTools')
        self.logger.setLevel(logging.INFO)

        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö handlers
        if self.logger.handlers:
            self.logger.handlers.clear()

        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S')

        # Handler –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        os.makedirs(os.path.dirname(self.log_file), exist_ok=True)
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ª–æ–≥–æ–≤
        logging.Formatter.converter = lambda *args: datetime.datetime.now(
            self.tz_plus3).timetuple()

    def _validate_path(self, path: str) -> str:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è path traversal –∞—Ç–∞–∫
        
        Args:
            path: –ü—É—Ç—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            str: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
            
        Raises:
            ValueError: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏
        """
        if not path:
            raise ValueError("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–¥—É—â–∏—Ö –∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        path = path.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        if os.path.isabs(path):
            raise ValueError("–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
        normalized = os.path.normpath(path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if normalized.startswith('..') or '/..' in normalized or '\\..\\' in normalized:
            raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–¥–ª—è Windows)
        forbidden_chars = '<>:"|?*'
        if any(char in normalized for char in forbidden_chars):
            raise ValueError(f"–ü—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {forbidden_chars}")

        return normalized

    def _get_safe_path(self, path: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        validated_path = self._validate_path(path)
        return os.path.join(self.working_dir, validated_path)

    def _run_git_command(self, command: List[str], cwd: str = None) -> tuple[bool, str, str]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å git –∫–æ–º–∞–Ω–¥—É
        
        Args:
            command: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            cwd: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            tuple: (success, stdout, stderr)
        """
        try:
            if cwd is None:
                cwd = self.working_dir
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            result = subprocess.run(
                ['git'] + command,
                cwd=cwd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=30
            )
            
            success = result.returncode == 0
            return success, result.stdout.strip(), result.stderr.strip()
            
        except subprocess.TimeoutExpired:
            return False, "", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 —Å–µ–∫)"
        except FileNotFoundError:
            return False, "", "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
        except Exception as e:
            return False, "", f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

    def _register_tools(self, mcp: MCP_Tools):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""

        @mcp.register_tool(name="git_init", description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        def git_init(
            path: Annotated[str, "–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                os.makedirs(safe_path, exist_ok=True)
                
                success, stdout, stderr = self._run_git_command(['init'], safe_path)
                
                if success:
                    self.logger.info(f"Git repository initialized in: {path}")
                    return [types.TextContent(type="text", text=f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ '{path}'")]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {stderr}"
                    self.logger.error(f"Git init failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {str(e)}"
                self.logger.error(f"Failed to init repository '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        def git_status(
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                success, stdout, stderr = self._run_git_command(['status', '--porcelain', '-b'], safe_path)
                
                if success:
                    if not stdout:
                        result = "‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è"
                    else:
                        lines = stdout.split('\n')
                        branch_info = lines[0] if lines[0].startswith('##') else "## Unknown branch"
                        changes = [line for line in lines[1:] if line.strip()]
                        
                        result = f"üìä –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:\n{branch_info}\n\n"
                        if changes:
                            result += "–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n"
                            for change in changes:
                                status = change[:2]
                                file_path = change[3:]
                                emoji = self._get_status_emoji(status)
                                result += f"{emoji} {file_path}\n"
                    
                    self.logger.info(f"Git status checked for: {path}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {stderr}"
                    self.logger.error(f"Git status failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_add", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å Git")
        def git_add(
            files: Annotated[str, "–§–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º, '.' –¥–ª—è –≤—Å–µ—Ö)"],
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                file_list = files.split() if files != '.' else ['.']
                
                success, stdout, stderr = self._run_git_command(['add'] + file_list, safe_path)
                
                if success:
                    result = f"‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å: {files}"
                    self.logger.info(f"Git add successful in {path}: {files}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {stderr}"
                    self.logger.error(f"Git add failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_commit", description="–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç")
        def git_commit(
            message: Annotated[str, "–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"],
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                success, stdout, stderr = self._run_git_command(['commit', '-m', message], safe_path)
                
                if success:
                    result = f"‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {message}\n{stdout}"
                    self.logger.info(f"Git commit successful in {path}: {message}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {stderr}"
                    self.logger.error(f"Git commit failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_push", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        def git_push(
            remote: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"] = "origin",
            branch: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏"] = "main",
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                success, stdout, stderr = self._run_git_command(['push', remote, branch], safe_path)
                
                if success:
                    result = f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ {remote}/{branch}\n{stdout}"
                    self.logger.info(f"Git push successful in {path} to {remote}/{branch}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {stderr}"
                    self.logger.error(f"Git push failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_pull", description="–ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        def git_pull(
            remote: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"] = "origin",
            branch: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏"] = "main",
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                success, stdout, stderr = self._run_git_command(['pull', remote, branch], safe_path)
                
                if success:
                    result = f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ {remote}/{branch}\n{stdout}"
                    self.logger.info(f"Git pull successful in {path} from {remote}/{branch}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {stderr}"
                    self.logger.error(f"Git pull failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_clone", description="–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        def git_clone(
            url: Annotated[str, "URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"],
            directory: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"] = "",
            path: Annotated[str, "–ü—É—Ç—å –≥–¥–µ —Å–æ–∑–¥–∞—Ç—å –∫–ª–æ–Ω"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                os.makedirs(safe_path, exist_ok=True)
                
                command = ['clone', url]
                if directory:
                    command.append(directory)
                
                success, stdout, stderr = self._run_git_command(command, safe_path)
                
                if success:
                    result = f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω: {url}\n{stdout}"
                    self.logger.info(f"Git clone successful: {url} to {path}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {stderr}"
                    self.logger.error(f"Git clone failed: {url} - {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_branch", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç–∫–∞–º–∏")
        def git_branch(
            action: Annotated[str, "–î–µ–π—Å—Ç–≤–∏–µ: list, create, delete, switch"],
            name: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–¥–ª—è create, delete, switch)"] = "",
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if action == "list":
                    success, stdout, stderr = self._run_git_command(['branch', '-a'], safe_path)
                    if success:
                        result = f"üåø –°–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫:\n{stdout}"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫: {stderr}"
                        
                elif action == "create":
                    if not name:
                        return [types.TextContent(type="text", text="‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏")]
                    success, stdout, stderr = self._run_git_command(['branch', name], safe_path)
                    if success:
                        result = f"‚úÖ –í–µ—Ç–∫–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏: {stderr}"
                        
                elif action == "delete":
                    if not name:
                        return [types.TextContent(type="text", text="‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏")]
                    success, stdout, stderr = self._run_git_command(['branch', '-d', name], safe_path)
                    if success:
                        result = f"‚úÖ –í–µ—Ç–∫–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∏: {stderr}"
                        
                elif action == "switch":
                    if not name:
                        return [types.TextContent(type="text", text="‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏")]
                    success, stdout, stderr = self._run_git_command(['checkout', name], safe_path)
                    if success:
                        result = f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –≤–µ—Ç–∫—É '{name}'"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–µ—Ç–∫—É: {stderr}"
                else:
                    return [types.TextContent(type="text", text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list, create, delete, switch")]
                
                self.logger.info(f"Git branch {action} in {path}: {name}")
                return [types.TextContent(type="text", text=result)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–µ—Ç–∫–∞–º–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_log", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤")
        def git_log(
            limit: Annotated[int, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞"] = 10,
            oneline: Annotated[bool, "–ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç)"] = True,
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                command = ['log', f'--max-count={limit}']
                if oneline:
                    command.append('--oneline')
                
                success, stdout, stderr = self._run_git_command(command, safe_path)
                
                if success:
                    if stdout:
                        result = f"üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit}):\n{stdout}"
                    else:
                        result = "üìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø—É—Å—Ç–∞"
                    self.logger.info(f"Git log checked for: {path}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {stderr}"
                    self.logger.error(f"Git log failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_remote", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏")
        def git_remote(
            action: Annotated[str, "–î–µ–π—Å—Ç–≤–∏–µ: list, add, remove"],
            name: Annotated[str, "–ù–∞–∑–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"] = "",
            url: Annotated[str, "URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è add)"] = "",
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if action == "list":
                    success, stdout, stderr = self._run_git_command(['remote', '-v'], safe_path)
                    if success:
                        result = f"üåê –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n{stdout}" if stdout else "üåê –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {stderr}"
                        
                elif action == "add":
                    if not name or not url:
                        return [types.TextContent(type="text", text="‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ URL")]
                    success, stdout, stderr = self._run_git_command(['remote', 'add', name, url], safe_path)
                    if success:
                        result = f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{name}' –¥–æ–±–∞–≤–ª–µ–Ω: {url}"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {stderr}"
                        
                elif action == "remove":
                    if not name:
                        return [types.TextContent(type="text", text="‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")]
                    success, stdout, stderr = self._run_git_command(['remote', 'remove', name], safe_path)
                    if success:
                        result = f"‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{name}' —É–¥–∞–ª–µ–Ω"
                    else:
                        result = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {stderr}"
                else:
                    return [types.TextContent(type="text", text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list, add, remove")]
                
                self.logger.info(f"Git remote {action} in {path}: {name}")
                return [types.TextContent(type="text", text=result)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_diff", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ñ–∞–π–ª–∞—Ö")
        def git_diff(
            staged: Annotated[bool, "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ staged —Ñ–∞–π–ª–∞—Ö"] = False,
            file_path: Annotated[str, "–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"] = "",
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                command = ['diff']
                if staged:
                    command.append('--cached')
                if file_path:
                    command.append(file_path)
                
                success, stdout, stderr = self._run_git_command(command, safe_path)
                
                if success:
                    if stdout:
                        result = f"üìã –†–∞–∑–ª–∏—á–∏—è:\n{stdout}"
                    else:
                        result = "üìã –†–∞–∑–ª–∏—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    self.logger.info(f"Git diff checked for: {path}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π: {stderr}"
                    self.logger.error(f"Git diff failed in {path}: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–∏–π: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_config", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        def git_config(
            key: Annotated[str, "–ö–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, user.name)"],
            value: Annotated[str, "–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"],
            global_config: Annotated[bool, "–ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"] = True,
            path: Annotated[str, "–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"] = "."
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                command = ['config']
                if global_config:
                    command.append('--global')
                command.extend([key, value])
                
                success, stdout, stderr = self._run_git_command(command, safe_path)
                
                if success:
                    result = f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {key} = {value}"
                    self.logger.info(f"Git config set: {key} = {value}")
                    return [types.TextContent(type="text", text=result)]
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {stderr}"
                    self.logger.error(f"Git config failed: {stderr}")
                    return [types.TextContent(type="text", text=error_msg)]
                    
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

        @mcp.register_tool(name="git_logs", description="–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π Git")
        def git_logs() -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                if not os.path.exists(self.log_file):
                    return [types.TextContent(type="text", text="–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")]

                with open(self.log_file, "r", encoding="utf-8") as f:
                    logs = f.read()

                if not logs.strip():
                    return [types.TextContent(type="text", text="–õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç")]

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
                lines = logs.strip().split('\n')
                if len(lines) > 50:
                    result = "\n".join(lines[-50:])
                    result = "... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)\n\n" + result
                else:
                    result = logs

                return [types.TextContent(type="text", text=result)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]

    def _get_status_emoji(self, status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞"""
        status_map = {
            'M ': 'üìù',  # Modified
            ' M': 'üìù',  # Modified
            'A ': '‚ûï',  # Added
            ' A': '‚ûï',  # Added
            'D ': 'üóëÔ∏è',  # Deleted
            ' D': 'üóëÔ∏è',  # Deleted
            'R ': 'üîÑ',  # Renamed
            ' R': 'üîÑ',  # Renamed
            'C ': 'üìã',  # Copied
            ' C': 'üìã',  # Copied
            '??': '‚ùì',  # Untracked
            '!!': 'üö´',  # Ignored
        }
        return status_map.get(status, 'üìÑ')
