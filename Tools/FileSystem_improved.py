from Data.MCP_Tools import MCP_Tools
import mcp.types as types
import datetime
import os
import logging
import json
import shutil
from typing import Dict, Callable, Annotated
from pathlib import Path

class FileSystemTools:
    def __init__(self, mcp: MCP_Tools) -> None:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.tz_plus3 = datetime.timezone(datetime.timedelta(hours=3))
        self.working_dir = "Data"
        self.log_file = os.path.join(self.working_dir, "filesystem.log")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.working_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self._register_tools(mcp)
        
        self.logger.info("FileSystemTools initialized")
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.logger = logging.getLogger('FileSystemTools')
        self.logger.setLevel(logging.INFO)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö handlers
        if self.logger.handlers:
            self.logger.handlers.clear()
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # Handler –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ª–æ–≥–æ–≤
        logging.Formatter.converter = lambda *args: datetime.datetime.now(self.tz_plus3).timetuple()
    
    def _validate_path(self, path: str) -> str:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è path traversal –∞—Ç–∞–∫
        
        Args:
            path: –ü—É—Ç—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            str: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
            
        Raises:
            ValueError: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—É—Ç–∏
        """
        if not path:
            raise ValueError("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–¥—É—â–∏—Ö –∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        path = path.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
        if os.path.isabs(path):
            raise ValueError("–ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
        normalized = os.path.normpath(path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if normalized.startswith('..') or '/..' in normalized or '\\\\..\\\\' in normalized:
            raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–¥–ª—è Windows)
        forbidden_chars = '<>:"|?*'
        if any(char in normalized for char in forbidden_chars):
            raise ValueError(f"–ü—É—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {forbidden_chars}")
        
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        full_path = os.path.join(self.working_dir, normalized)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—É—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try:
            real_working_dir = os.path.realpath(self.working_dir)
            real_target_path = os.path.realpath(full_path)
            if not real_target_path.startswith(real_working_dir):
                raise ValueError("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        except OSError:
            # –§–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        
        return normalized
    
    def _get_safe_path(self, path: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        validated_path = self._validate_path(path)
        return os.path.join(self.working_dir, validated_path)
    
    def _register_tools(self, mcp: MCP_Tools):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        
        @mcp.register_tool(name="listfiles", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫")
        def listfiles() -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                items = []
                for item in os.listdir(self.working_dir):
                    if item == "filesystem.log":  # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        continue
                    item_path = os.path.join(self.working_dir, item)
                    if os.path.isdir(item_path):
                        items.append(f"üìÅ {item}/")
                    else:
                        size = os.path.getsize(item_path)
                        items.append(f"üìÑ {item} ({self._format_size(size)})")
                
                result = "\\n".join(items) if items else "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
                self.logger.info("Listed files successfully")
                return [types.TextContent(type="text", text=result)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
                self.logger.error(error_msg)
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="savefile", description="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
        def savefile(
            path: Annotated[str, "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"],
            content: Annotated[str, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"],
            encoding: Annotated[str, "–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞"] = "utf-8"
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                os.makedirs(os.path.dirname(safe_path), exist_ok=True)
                
                with open(safe_path, "w", encoding=encoding) as f:
                    f.write(content)
                
                size = len(content.encode(encoding))
                self.logger.info(f"File saved: {path} ({self._format_size(size)})")
                return [types.TextContent(type="text", text=f"–§–∞–π–ª '{path}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")]
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                self.logger.error(f"Failed to save file '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="readfile", description="–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
        def readfile(
            path: Annotated[str, "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"],
            encoding: Annotated[str, "–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞"] = "utf-8"
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if not os.path.exists(safe_path):
                    error_msg = f"–§–∞–π–ª '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    self.logger.warning(f"File not found: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                with open(safe_path, "r", encoding=encoding) as f:
                    content = f.read()
                
                self.logger.info(f"File read: {path} ({self._format_size(len(content.encode(encoding)))})")
                return [types.TextContent(type="text", text=content)]
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except UnicodeDecodeError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ '{path}': {str(e)}"
                self.logger.error(f"Encoding error for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                self.logger.error(f"Failed to read file '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="deletefile", description="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª")
        def deletefile(
            path: Annotated[str, "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É"]
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if not os.path.exists(safe_path):
                    error_msg = f"–§–∞–π–ª '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    self.logger.warning(f"Attempted to delete non-existent file: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                if os.path.isdir(safe_path):
                    error_msg = f"'{path}' —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ deletedir –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
                    self.logger.warning(f"Attempted to delete directory as file: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                os.remove(safe_path)
                self.logger.info(f"File deleted: {path}")
                return [types.TextContent(type="text", text=f"–§–∞–π–ª '{path}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")]
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                self.logger.error(f"Failed to delete file '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="createdir", description="–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        def createdir(
            path: Annotated[str, "–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"]
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if os.path.exists(safe_path):
                    error_msg = f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    self.logger.warning(f"Attempted to create existing directory: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                os.makedirs(safe_path, exist_ok=False)
                self.logger.info(f"Directory created: {path}")
                return [types.TextContent(type="text", text=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")]
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}"
                self.logger.error(f"Failed to create directory '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="deletedir", description="–£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        def deletedir(
            path: Annotated[str, "–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"],
            recursive: Annotated[bool, "–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)"] = False
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if not os.path.exists(safe_path):
                    error_msg = f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    self.logger.warning(f"Attempted to delete non-existent directory: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                if not os.path.isdir(safe_path):
                    error_msg = f"'{path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π"
                    self.logger.warning(f"Attempted to delete non-directory as directory: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                if recursive:
                    shutil.rmtree(safe_path)
                    self.logger.info(f"Directory deleted recursively: {path}")
                    return [types.TextContent(type="text", text=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' –∏ –≤—Å–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")]
                else:
                    os.rmdir(safe_path)
                    self.logger.info(f"Empty directory deleted: {path}")
                    return [types.TextContent(type="text", text=f"–ü—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")]
            except OSError as e:
                if "Directory not empty" in str(e):
                    error_msg = f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' –Ω–µ –ø—É—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ recursive=true –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}"
                self.logger.error(f"Failed to delete directory '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {str(e)}"
                self.logger.error(f"Failed to delete directory '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="fileinfo", description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        def fileinfo(
            path: Annotated[str, "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"]
        ) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                safe_path = self._get_safe_path(path)
                
                if not os.path.exists(safe_path):
                    error_msg = f"–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    self.logger.warning(f"Attempted to get info for non-existent path: {path}")
                    return [types.TextContent(type="text", text=error_msg)]
                
                stat = os.stat(safe_path)
                is_dir = os.path.isdir(safe_path)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                mtime = datetime.datetime.fromtimestamp(stat.st_mtime, self.tz_plus3)
                ctime = datetime.datetime.fromtimestamp(stat.st_ctime, self.tz_plus3)
                
                info = {
                    "–ü—É—Ç—å": path,
                    "–¢–∏–ø": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è" if is_dir else "–§–∞–π–ª",
                    "–†–∞–∑–º–µ—Ä": self._format_size(stat.st_size) if not is_dir else "-",
                    "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ": mtime.strftime("%Y-%m-%d %H:%M:%S %Z"),
                    "–°–æ–∑–¥–∞–Ω–æ": ctime.strftime("%Y-%m-%d %H:%M:%S %Z"),
                    "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞": oct(stat.st_mode)[-3:]
                }
                
                if is_dir:
                    try:
                        items = os.listdir(safe_path)
                        info["–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"] = f"{len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                    except PermissionError:
                        info["–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"] = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
                
                result = "\\n".join([f"{key}: {value}" for key, value in info.items()])
                self.logger.info(f"File info requested: {path}")
                return [types.TextContent(type="text", text=result)]
            except ValueError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–∏: {str(e)}"
                self.logger.warning(f"Path validation failed for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
                self.logger.error(f"Failed to get file info for '{path}': {str(e)}")
                return [types.TextContent(type="text", text=error_msg)]
        
        @mcp.register_tool(name="getlogs", description="–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        def getlogs() -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:
            try:
                if not os.path.exists(self.log_file):
                    return [types.TextContent(type="text", text="–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")]
                
                with open(self.log_file, "r", encoding="utf-8") as f:
                    logs = f.read()
                
                if not logs.strip():
                    return [types.TextContent(type="text", text="–õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç")]
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
                lines = logs.strip().split('\\n')
                if len(lines) > 50:
                    result = "\\n".join(lines[-50:])
                    result = "... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)\\n\\n" + result
                else:
                    result = logs
                
                return [types.TextContent(type="text", text=result)]
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}"
                return [types.TextContent(type="text", text=error_msg)]
    
    def _format_size(self, size: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size < 1024.0:
                return f"{size:.1f} {unit}"
            size /= 1024.0
        return f"{size:.1f} –¢–ë"
